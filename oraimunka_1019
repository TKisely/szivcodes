#include <iostream>
#define TOMBMERET 10

int szamTomb[TOMBMERET];
char karakterek[TOMBMERET];

using namespace std;

void indexekkelFeltolt(){
    for(int i=0;i<TOMBMERET;i++){
        szamTomb[i]=i;
    }
}

void parossalTolt(){
    for(int i=0;i<TOMBMERET;i++){
        szamTomb[i]=2*(i+1);
    }
}

bool beteszHelyre(int hova, int mit){
    if(hova>=0&&hova<TOMBMERET){
        szamTomb[hova]=mit;
        return true;
    }
    return false;
}

bool szamotCserel(int elsoIndexe, int masodikIndexe){
    if(elsoIndexe<TOMBMERET&&elsoIndexe>=0&&
       masodikIndexe<TOMBMERET&&masodikIndexe>=0){

        int ideiglenes = szamTomb[elsoIndexe];
        szamTomb[elsoIndexe] = szamTomb[masodikIndexe];
        szamTomb[masodikIndexe] = ideiglenes;
        return true;

       }

       return false;
}

void kiIr(){
    for(int i=0;i<TOMBMERET;i++){
        cout<<"A tomb "<<i<<". eleme = "<<szamTomb[i]<<endl;
    }
}

void utolsoElemBeallit(char karakter){
    karakterek[9]=karakter;
}

void azAlmaJo(){
    karakterek[0]='A';
    karakterek[1]='z';
    karakterek[2]=' ';
    karakterek[3]='a';
    karakterek[4]='l';
    karakterek[5]='m';
    karakterek[6]='a';
    karakterek[7]=' ';
    karakterek[8]='j';
    karakterek[9]='o';
}

bool karakterIndexre(int hova, char mit){
    if(hova>=0&&hova<TOMBMERET){
        karakterek[hova]=mit;
        return true;
    }
    return false;
}

void kiIrSzoveges(){
    for(int i=0;i<TOMBMERET;i++){
        cout<<i<<". karakterem = "<<karakterek[i]<<endl;
    }
}

void konzolrolFeltolt(){
    for(int i=0;i<TOMBMERET;i++){

        cout<<"Kerem adja meg a(z) "<<i+1<<". elemet"<<endl;
        cin>>szamTomb[i];
    }
}




int main()
{
    konzolrolFeltolt();
    kiIr();


    cout << "Lefutottam!" << endl;
    return 0;
}

